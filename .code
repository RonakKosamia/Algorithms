```kotlin


class RecentContactStore(private val context: Context) {
  private val dataStore = context.createDataStore("recent_contacts")

  companion object {
    private const val KEY = "recent_eids"
    private const val MAX_RECENTS = 10
  }

  suspend fun addRecent(eid: String) {
    dataStore.edit { prefs ->
      val existing = prefs[preferencesKey<String>(KEY)]?.split(",") ?: emptyList()
      val updated = (listOf(eid) + existing).distinct().take(MAX_RECENTS)
      prefs[preferencesKey<String>(KEY)] = updated.joinToString(",")
    }
  }

  suspend fun getRecents(): List<String> {
    val prefs = dataStore.data.first()
    return prefs[preferencesKey<String>(KEY)]?.split(",") ?: emptyList()
  }
}




@Entity(tableName = "followed_contacts")
data class FollowedContact(
  @PrimaryKey val eid: String,
  val addedAt: Long = System.currentTimeMillis()
)


@Dao
interface FollowedContactDao {
  @Insert(onConflict = REPLACE)
  suspend fun follow(contact: FollowedContact)

  @Delete
  suspend fun unfollow(contact: FollowedContact)

  @Query("SELECT * FROM followed_contacts")
  suspend fun getAll(): List<FollowedContact>

  @Query("SELECT EXISTS(SELECT 1 FROM followed_contacts WHERE eid = :eid)")
  suspend fun isFollowed(eid: String): Boolean
}



